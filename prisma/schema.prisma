generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  region        String?   @default("US")
  segment       String?   @default("general")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  accounts    Account[]
  sessions    Session[]
  memberships Membership[]
  queryLogs   QueryLog[]
  agentRuns   AgentRun[]
}

model Organization {
  id        String      @id @default(cuid())
  name      String
  slug      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  
  workspaces Workspace[]
}

model Workspace {
  id             String   @id @default(cuid())
  name           String
  slug           String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  organization   Organization   @relation(fields: [organizationId], references: [id])
  memberships    Membership[]
  connectors     Connector[]
  datasets       Dataset[]
  queryLogs      QueryLog[]
  agentRuns      AgentRun[]
  invites        Invite[]
  cachedQueries  CachedQuery[]

  @@unique([organizationId, slug])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // VIEWER, ANALYST, ADMIN
  description String?
  createdAt   DateTime @default(now())

  memberships Membership[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  roles RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Membership {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])

  @@unique([userId, workspaceId])
}

model Invite {
  id          String   @id @default(cuid())
  email       String
  workspaceId String
  roleId      String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  acceptedAt  DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([email, workspaceId])
}

model Connector {
  id          String   @id @default(cuid())
  name        String
  type        String   // postgres, csv
  workspaceId String
  config      String   // encrypted JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  datasets  Dataset[]
}

model Dataset {
  id          String   @id @default(cuid())
  name        String
  description String?
  workspaceId String
  connectorId String?
  schema      String?
  tableName   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  connector     Connector?      @relation(fields: [connectorId], references: [id])
  columns       DatasetColumn[]
  maskingPolicies MaskingPolicy[]
  rowPolicies   RowPolicy[]
  queryLogs     QueryLog[]
}

model DatasetColumn {
  id        String   @id @default(cuid())
  datasetId String
  name      String
  type      String
  nullable  Boolean  @default(true)
  createdAt DateTime @default(now())

  dataset         Dataset         @relation(fields: [datasetId], references: [id])
  maskingPolicies MaskingPolicy[]

  @@unique([datasetId, name])
}

model MaskingPolicy {
  id        String   @id @default(cuid())
  datasetId String
  columnId  String
  maskType  String   // NONE, HASH, NULL, REDACT, RANGE_BUCKET
  config    Json?    // additional config for mask type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dataset Dataset       @relation(fields: [datasetId], references: [id])
  column  DatasetColumn @relation(fields: [columnId], references: [id])

  @@unique([datasetId, columnId])
}

model RowPolicy {
  id          String   @id @default(cuid())
  datasetId   String
  name        String
  predicate   String   // SQL WHERE clause
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dataset Dataset @relation(fields: [datasetId], references: [id])
}

model QueryLog {
  id              String   @id @default(cuid())
  userId          String
  workspaceId     String
  datasetId       String?
  sqlHash         String
  sql             String
  affectedRows    Int?
  durationMs      Int
  success         Boolean
  error           String?
  policySnapshot  Json?
  createdAt       DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id])
  workspace Workspace  @relation(fields: [workspaceId], references: [id])
  dataset   Dataset?   @relation(fields: [datasetId], references: [id])

  @@index([workspaceId, createdAt])
  @@index([sqlHash])
}

model CachedQuery {
  id          String   @id @default(cuid())
  workspaceId String
  cacheKey    String   @unique
  result      Json
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@index([expiresAt])
}

model AgentRun {
  id          String   @id @default(cuid())
  taskId      String   @unique
  agentType   String
  workspaceId String
  userId      String
  payload     Json
  status      String   @default("pending") // pending, running, completed, failed
  result      Json?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([workspaceId, createdAt])
  @@index([status])
}

// Demo schema tables
model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  region    String
  segment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Order {
  id         String   @id @default(cuid())
  customerId String
  channel    String
  status     String
  total      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer    @relation(fields: [customerId], references: [id])
  items    OrderItem[]

  @@map("orders")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  category    String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
